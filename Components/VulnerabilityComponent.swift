//
//  VulnerabilityComponent.swift
//  Of Witches and Mazes
//
//  Created by Gustavo C. Viegas on 5/30/19.
//  Copyright Â© 2019 Gustavo C. Viegas. All rights reserved.
//

/// A component that enables an entity to become unable to defend and resist.
///
class VulnerabilityComponent: Component {
    
    /// The vulnerability count.
    ///
    private var vulnerabilityCount = 0 {
        didSet {
            vulnerabilityCount = max(0, vulnerabilityCount)
            broadcast()
        }
    }
    
    /// The flag stating whether the entity is vulnerable.
    ///
    var isVulnerable: Bool {
        return vulnerabilityCount > 0
    }
    
    /// Increases the vulnerability count.
    ///
    /// Vulnerability is controlled by a count that keeps track of how many vulnerability effects were applied.
    /// The entity will only stop being vulnerable when all vulnerability applications are removed with a call
    /// to `decreaseVulnerability()`. Thus, it is of utmost importance that every call to `increaseVulnerability()`
    /// eventually be followed by exactly one call to `decreaseVulnerability()`.
    ///
    func increaseVulnerability() {
        vulnerabilityCount += 1
    }
    
    /// Decreases the vulnerability count.
    ///
    /// Vulnerability is controlled by a count that keeps track of how many vulnerability effects were applied
    /// using the `increaseVulnerability()` method.
    /// The entity will only stop being vulnerable when all vulnerability applications are removed with a call
    /// to `decreaseVulnerability()`. Thus, it is of utmost importance that every call to `increaseVulnerability()`
    /// eventually be followed by exactly one call to `decreaseVulnerability()`.
    ///
    func decreaseVulnerability() {
        vulnerabilityCount -= 1
    }
}
